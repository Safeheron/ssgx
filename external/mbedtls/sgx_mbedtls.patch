diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0535dc1..44d8273 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -2,20 +2,21 @@
 cmake_minimum_required(VERSION 3.0)
 project(mbedtls_SGX "C" "CXX")
 
+set(PROJECT_VERSION 2.6.0)
 set(MBEDTLS_VERSION 2.6.0)
 
 set(SGX_SDK /opt/intel/sgxsdk)
 set(SGX_ARCH x64)
-set(SGX_MODE SIM CACHE STRING "SGX mode: SIM or HW") # SGX mode: sim, hw
+set(SGX_MODE HW CACHE STRING "SGX mode: SIM or HW") # SGX mode: sim, hw
 set(COMPILE_EXAMPLES NO CACHE BOOL "Build examples")
-set(SGX_BUILD DEBUG CACHE STRING "Build: DEBUG, PRERELEASE or RELEASE")
+set(SGX_BUILD RELEASE CACHE STRING "Build: DEBUG, PRERELEASE or RELEASE")
 
 include (cmake/Init.cmake)
 include (cmake/ConfigSGX.cmake)
 
-set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/${PROJECT_NAME}-${MBEDTLS_VERSION})
+# set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/${PROJECT_NAME}-${MBEDTLS_VERSION})
 
-set(MBEDTLS_LIB_DIR ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})
+# set(MBEDTLS_LIB_DIR ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})
 
 add_subdirectory(trusted)
 add_subdirectory(ocall)
@@ -23,3 +24,5 @@ add_subdirectory(ocall)
 if (COMPILE_EXAMPLES)
     add_subdirectory(example)
 endif()
+
+include("cmake/setup_installation.cmake")
\ No newline at end of file
diff --git a/cmake/mbedtls_SGXConfig.cmake.in b/cmake/mbedtls_SGXConfig.cmake.in
new file mode 100644
index 0000000..03b534b
--- /dev/null
+++ b/cmake/mbedtls_SGXConfig.cmake.in
@@ -0,0 +1,15 @@
+include(CMakeFindDependencyMacro)
+@mbedtls_SGX_FIND_DEPENDENCY_CALLS@
+include("${CMAKE_CURRENT_LIST_DIR}/@exported_targets_filename@")
+
+get_filename_component (CMAKE_CURRENT_LIST_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
+get_filename_component (_INSTALL_PREFIX "${CMAKE_CURRENT_LIST_DIR}/../../../" ABSOLUTE)
+
+@PACKAGE_INIT@
+set_and_check(mbedtls_SGX_INCLUDE_DIR  "${_INSTALL_PREFIX}/include")
+set_and_check(mbedtls_SGX_INCLUDE_DIRS "${_INSTALL_PREFIX}/include")
+set_and_check(mbedtls_SGX_LIBRARY_DIR "${_INSTALL_PREFIX}/lib")
+set_and_check(mbedtls_SGX_LIBRARY_T "${_INSTALL_PREFIX}/lib/libmbedtls_SGX_t.a")
+set_and_check(mbedtls_SGX_LIBRARY_U "${_INSTALL_PREFIX}/lib/libmbedtls_SGX_u.a")
+
+MESSAGE(STATUS "Found mbedtls_SGX.")
\ No newline at end of file
diff --git a/cmake/setup_installation.cmake b/cmake/setup_installation.cmake
new file mode 100644
index 0000000..da76797
--- /dev/null
+++ b/cmake/setup_installation.cmake
@@ -0,0 +1,67 @@
+include(CMakePackageConfigHelpers)
+
+set(exported_targets_name "${PROJECT_NAME}Targets")
+set(exported_targets_filename "${exported_targets_name}.cmake")
+set(export_dirpath "lib/cmake/${PROJECT_NAME}")
+set(config_basename "${PROJECT_NAME}Config")
+set(config_filename "${config_basename}.cmake")
+set(version_filename "${config_basename}Version.cmake")
+set(MBEDTLS_SOURCE_PATH "${CMAKE_SOURCE_DIR}")
+
+write_basic_package_version_file(
+        "${PROJECT_NAME}ConfigVersion.cmake"
+        VERSION ${PROJECT_VERSION}
+        COMPATIBILITY AnyNewerVersion)
+
+configure_package_config_file(
+        "cmake/${config_filename}.in" "${config_filename}"
+        INSTALL_DESTINATION "${export_dirpath}"
+)
+
+# install trusted library file
+install(
+        TARGETS ${PROJECT_NAME}_t
+        EXPORT ${exported_targets_name}
+        ARCHIVE DESTINATION lib
+        LIBRARY DESTINATION lib
+        INCLUDES DESTINATION include
+)
+
+# install untrusted library file
+install(
+        TARGETS ${PROJECT_NAME}_u
+        EXPORT ${exported_targets_name}
+        ARCHIVE DESTINATION lib
+        LIBRARY DESTINATION lib
+        INCLUDES DESTINATION include
+)
+
+install(
+        EXPORT ${exported_targets_name}
+        FILE ${exported_targets_filename}
+        DESTINATION ${export_dirpath}
+)
+
+install(
+        FILES
+        "${CMAKE_CURRENT_BINARY_DIR}/${config_filename}"
+        "${CMAKE_CURRENT_BINARY_DIR}/${version_filename}"
+        DESTINATION
+        ${export_dirpath}
+)
+
+# Install header files
+install(DIRECTORY ${CMAKE_SOURCE_DIR}/include/mbedtls
+        DESTINATION include
+        FILES_MATCHING PATTERN "*.h"
+        )
+install(FILES ${CMAKE_SOURCE_DIR}/include/glue.h
+        DESTINATION include/mbedtls
+        PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
+        )
+
+# Install EDL file
+install(FILES ${CMAKE_SOURCE_DIR}/trusted/${PROJECT_NAME}.edl
+        DESTINATION include/mbedtls
+        PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
+        )
diff --git a/ocall/CMakeLists.txt b/ocall/CMakeLists.txt
index 2ab1dec..a55d212 100644
--- a/ocall/CMakeLists.txt
+++ b/ocall/CMakeLists.txt
@@ -6,6 +6,6 @@ add_library(${PROJECT_NAME}_u STATIC net_ocalls.c std_ocalls.c)
 include_directories(
     ../trusted/mbedtls-${MBEDTLS_VERSION}/include)
 
-install(TARGETS ${PROJECT_NAME}_u
-    DESTINATION lib
-    PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
\ No newline at end of file
+#install(TARGETS ${PROJECT_NAME}_u
+#    DESTINATION lib
+#    PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
\ No newline at end of file
diff --git a/trusted/CMakeLists.txt b/trusted/CMakeLists.txt
index d51f774..0624637 100644
--- a/trusted/CMakeLists.txt
+++ b/trusted/CMakeLists.txt
@@ -9,7 +9,7 @@ add_custom_command(
 
 add_library(${PROJECT_NAME}_t STATIC ${MBEDTLS_SGX_SRC_FILES} ${PROJECT_NAME}_t.c glue.c dummy.c net_sockets_proxy.c)
 
-add_subdirectory(mbedtls-${MBEDTLS_VERSION}/include)
+# add_subdirectory(mbedtls-${MBEDTLS_VERSION}/include)
 
 include_directories(
     $(CMAKE_CURRENT_SOURCE_DIR)
@@ -22,18 +22,18 @@ include_directories(
 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${SGX_COMMON_CFLAGS} -nostdinc -fvisibility=hidden -fpie -fstack-protector")
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS} -std=c++03 -nostdinc++")
 
-target_link_libraries(${PROJECT_NAME}_t "${SGX_COMMON_CFLAGS} \
-    -Wl,--no-undefined -nostdlib -nodefaultlibs -nostartfiles -L${SGX_LIBRARY_PATH} \
-    -Wl,--whole-archive -l${SGX_TRTS_LIB} -Wl,--no-whole-archive \
-    -Wl,--start-group ${LIB_MBEDTLS_PATH} -lsgx_tstdc -lsgx_tcxx -lsgx_tcrypto -l${SGX_TSVC_LIB} -Wl,--end-group \
-    -Wl,-Bstatic -Wl,-Bsymbolic -Wl,--no-undefined \
-    -Wl,-pie,-eenclave_entry -Wl,--export-dynamic \
-    -Wl,--defsym,__ImageBase=0")
-
-install(TARGETS ${PROJECT_NAME}_t
-    DESTINATION lib
-    PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
-
-install(FILES ${PROJECT_NAME}.edl
-    DESTINATION lib
-    PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
\ No newline at end of file
+target_link_options(${PROJECT_NAME}_t PRIVATE ${SGX_COMMON_CFLAGS}
+    -Wl,--no-undefined -nostdlib -nodefaultlibs -nostartfiles -L${SGX_LIBRARY_PATH}
+    -Wl,--whole-archive -l${SGX_TRTS_LIB} -Wl,--no-whole-archive
+    -Wl,--start-group ${LIB_MBEDTLS_PATH} -lsgx_tstdc -lsgx_tcxx -lsgx_tcrypto -l${SGX_TSVC_LIB} -Wl,--end-group
+    -Wl,-Bstatic -Wl,-Bsymbolic -Wl,--no-undefined
+    -Wl,-pie,-eenclave_entry -Wl,--export-dynamic
+    -Wl,--defsym,__ImageBase=0)
+
+# install(TARGETS ${PROJECT_NAME}_t
+#     DESTINATION lib
+#     PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
+#
+# install(FILES ${PROJECT_NAME}.edl
+#     DESTINATION lib
+#     PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
\ No newline at end of file
